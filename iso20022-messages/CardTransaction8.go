package iso20022

// Card transaction for which the authorisation has been requested.
type CardTransaction8 struct {

	// Type of transaction being undertaken for the main service.
	// It correspond partially to the ISO 8583, field number 3.
	TransactionType *CardPaymentServiceType7Code `xml:"TxTp"`

	// Identification of the reconciliation period between the acquirer and the issuer or their respective agents.
	Reconciliation *TransactionIdentifier2 `xml:"Rcncltn,omitempty"`

	// Date and time of the transaction transported unchanged by the acquirer from the card acceptor to the issuer. Corresponds to the CAPE data element TransactionIdentification/ TransactionDateTime.
	// It correspond to the ISO 8583, field number 12.
	AcceptorTransactionDateTime *ISODateTime `xml:"AccptrTxDtTm"`

	// Number generated by the transaction Initiator to assist in identifying a transaction uniquely. This value remains unchanged for all messages within a message pair exchange, for instance an initiation/response. It corresponds to the ISO 8583 field number 11.
	InitiatorTransactionIdentification *Max35Text `xml:"InitrTxId"`

	// Unique identification to match transactions throughout their life cycle (for example, authorisation to financial presentment, financial presentment to chargeback). It shall contain the same value in all messages throughout a transactionâ€™s life cycle. It corresponds partially to ISO 8583:2003 field number 21.
	TransactionLifeCycleIdentification *Max35Text `xml:"TxLifeCyclId,omitempty"`

	// Life cycle transaction sequence number when multiple authorisations are performed for the same presentment.
	// It corresponds partially to ISO 8583:2003, field number 21.
	TransactionLifeCycleSequenceNumber *Number `xml:"TxLifeCyclSeqNb,omitempty"`

	// Total number of transactions under the same life cycle transaction sequence number.
	TransactionLifeCycleSequenceCounter *Number `xml:"TxLifeCyclSeqCntr,omitempty"`

	// Details of the card transaction.
	TransactionDetails *CardTransactionDetail6 `xml:"TxDtls"`

	// Response to the reversal.
	TransactionResponse *ResponseType2 `xml:"TxRspn"`
}

func (c *CardTransaction8) SetTransactionType(value string) {
	c.TransactionType = (*CardPaymentServiceType7Code)(&value)
}

func (c *CardTransaction8) AddReconciliation() *TransactionIdentifier2 {
	c.Reconciliation = new(TransactionIdentifier2)
	return c.Reconciliation
}

func (c *CardTransaction8) SetAcceptorTransactionDateTime(value string) {
	c.AcceptorTransactionDateTime = (*ISODateTime)(&value)
}

func (c *CardTransaction8) SetInitiatorTransactionIdentification(value string) {
	c.InitiatorTransactionIdentification = (*Max35Text)(&value)
}

func (c *CardTransaction8) SetTransactionLifeCycleIdentification(value string) {
	c.TransactionLifeCycleIdentification = (*Max35Text)(&value)
}

func (c *CardTransaction8) SetTransactionLifeCycleSequenceNumber(value string) {
	c.TransactionLifeCycleSequenceNumber = (*Number)(&value)
}

func (c *CardTransaction8) SetTransactionLifeCycleSequenceCounter(value string) {
	c.TransactionLifeCycleSequenceCounter = (*Number)(&value)
}

func (c *CardTransaction8) AddTransactionDetails() *CardTransactionDetail6 {
	c.TransactionDetails = new(CardTransactionDetail6)
	return c.TransactionDetails
}

func (c *CardTransaction8) AddTransactionResponse() *ResponseType2 {
	c.TransactionResponse = new(ResponseType2)
	return c.TransactionResponse
}
